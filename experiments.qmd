---
title: "Fair clustering experiments"
execute:
  echo: false
  warning: false
  message: false
---

- [ ] Fare gli esperimenti con i due solver

```{r}
library(tidyverse)
library(ggpattern)
library(kableExtra)
theme_set(theme_bw() + theme(legend.position="bottom"))

imgdir <- "imgs"

imgpath <- function(key) {
  str_c(imgdir, key, "clustering.png", sep="/")
}

dataset_stats <- function() {
  con <- DBI::dbConnect(RSQLite::SQLite(), "results.db")
  stats <- tbl(con, "dataset_stats") |> collect()
  DBI::dbDisconnect(con)
  stats
}

load_data <- function() {
  con <- DBI::dbConnect(RSQLite::SQLite(), "results.db")

  q <- "select *, json_extract(params, '$.tau') / k as tau,
        cast(additional_metrics -> '$.coreset_radius' as real) as coreset_radius,
        cast(additional_metrics -> '$.time_coreset_s' as real) as coreset_time_s
        from results"

  results <- tbl(con, sql(q)) |> 
    filter(delta == 0) |>
    inner_join(tbl(con, "dataset_stats")) |>
    collect() |>
    mutate(
      timeout_s = if_else(time_s > 30*60, 30*60, timeout_s),
      timed_out = !is.na(timeout_s),
      time_s = if_else(timed_out, timeout_s, time_s),
      scaled_time_spp = time_s / n,
      scaled_coreset_time_spp = coreset_time_s / n,
      img_path = imgpath(hdf5_key),
      coreset_size_frac = tau * k / n,
      dataset = fct_reorder(dataset, desc(n))
    ) |>
    group_by(dataset, k) |>
    mutate(scaled_radius = radius / min(radius, na.rm=T)) |>
    ungroup()

  DBI::dbDisconnect(con)
  results
}

results <- load_data()
dataojs <- results |>
  select(dataset, k, algorithm, tau, radius, time_s, scaled_radius) |>
  group_by(dataset, k, algorithm, tau) |>
  summarise(across(c(radius, time_s, scaled_radius), mean))
ojs_define(data = dataojs)
```

```{r}
dataset_stats() |>
  distinct(dataset, n, dimensions) |>
  arrange(desc(n)) |>
  kbl() |>
  kable_styling()
```

```{r}
#| column: screen
#| out-width: "100%"
#| fig-width: 15
#| fig-height: 15

results |>
  ggplot(aes(scaled_radius, time_s, color=algorithm, shape=algorithm)) +
  geom_point(data=~ filter(., timed_out), shape=21, color="black", fill="white", size=4) +
  geom_point() +
  facet_grid(vars(dataset), vars(k))
```

```{r}
load_data() |>
  mutate(tau = if_else(is.na(tau), 0, tau)) |>
  ggplot(aes(k, radius, color=algorithm)) +
  geom_line(data=~filter(., algorithm != "coreset-fair-k-center")) +
  geom_point(data=~filter(., algorithm != "coreset-fair-k-center")) +
  geom_line(
    data=~filter(., algorithm == "coreset-fair-k-center"),
    mapping=aes(linetype=factor(tau)),
    stat="summary",
    fun=mean
  ) +
  geom_point(
    data=~filter(., algorithm == "coreset-fair-k-center"),
    mapping=aes(shape=factor(tau)),
    stat="summary",
    fun=mean
  ) +
  scale_y_continuous(limits=c(0,NA)) +
  facet_wrap(vars(dataset), scale="free_y")
```

```{r}
#| fig-cap: Coreset radius at different coreset sizes, scaled as a percentage of the input size
#| fig-width: 10
#| column: page

load_data() |>
  ggplot(aes(coreset_size_frac, coreset_radius, color=factor(k))) +
  geom_line(data=~drop_na(., coreset_radius)) +
  scale_x_continuous(limits=c(0,1), labels=scales::percent) +
  facet_grid(vars(dataset), vars(factor(k)), scales="free")
```

```{r}
#| column: page
#| fig-cap: Radius of the solution wrt the coreset size
#| out-width: "100%"
#| fig-width: 10
#| fig-height: 10

load_data() |>
  ggplot(aes(coreset_size_frac, scaled_radius, color=algorithm)) +
  geom_line(data=~drop_na(., coreset_radius), stat="summary") +
  geom_point(data=~drop_na(., coreset_radius), size=1) +
  geom_hline(
    aes(yintercept = scaled_radius, color=algorithm),
    data=~filter(., algorithm != "coreset-fair-k-center")
  ) +
  scale_y_continuous(limits=c(1,NA)) +
  scale_x_continuous(limits=c(0,1), labels=scales::percent) +
  facet_grid(vars(dataset), vars(factor(k)), scales="free")
```

Notable things in @fig-time are that the KFC algorithm has some sudden jumps in the running 
time with increases in $k$, due to changes in the _joiners_ structure as $k$ increases: the 
radius becomes smaller hence the problem becomes larger.

```{r}
#| label: fig-time
#| column: page
#| fig-cap: Running time
#| out-width: "100%"
#| fig-width: 10
#| fig-height: 10

filterfn <- function(dat) {
  dat |>
    filter(coreset_size_frac <= 1) |>
    drop_na(coreset_size_frac)
}

load_data() |>
  ggplot(aes(y=time_s, color=algorithm, fill=algorithm)) +
  geom_line(aes(x=coreset_size_frac), data=filterfn, stat="summary") +
  geom_area(aes(x=coreset_size_frac, y=time_s), data=filterfn, alpha=0.2, stat="summary") +
  geom_area(aes(x=coreset_size_frac, y=coreset_time_s), data=filterfn, stat="summary") +
  # geom_point(data=filterfn, size=1) +
  geom_hline(
    aes(yintercept = time_s, color=algorithm, fill=algorithm),
    data=~filter(., algorithm != "coreset-fair-k-center")
  ) +
  scale_x_continuous(limits=c(0,1), labels=scales::percent) +
  facet_grid(vars(dataset), vars(factor(k)), scales="free")
```

```{ojs}
viewof dataset = Inputs.radio(new Set(data.dataset), {label: "Dataset", value: "census1990"})
viewof kval = Inputs.radio(new Set(data.k), {label: "K", value: 2})
```

```{ojs}
//| column: body

Plot.plot({
  color: {legend: true},
  marks: [
    Plot.dot(
      transpose(data).filter(r => r.dataset == dataset && r.k == kval),
      {
        x: "radius",
        y: "time_s",
        fill: "algorithm",
        stroke: "algorithm"
      })
  ]
})
```

```{ojs}
viewof search = Inputs.search(transpose(data))
```

```{ojs}
Inputs.table(search)
```


